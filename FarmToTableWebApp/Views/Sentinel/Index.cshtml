@model FarmToTableWebApp.ViewModels.Sentinels.SentinelIndexViewModel
@{
    ViewData["Title"] = "Pending Analysis";
}
@using FarmToTableData.Models

<style>
    .bg-brown {
        background-color: #a55d2a;
    }
</style>

<h1>
    Sentinels
</h1>
@using (Html.BeginForm("SubmitAnalysisResult", "Sentinel", FormMethod.Post, new { @id = "frm-analysis" }))
{
    @Html.AntiForgeryToken()
    <div class="card card-body">
        <div class="d-flex justify-content-end">
            <button id="btn-refresh" type="button" class="btn btn-outline-dark btn-sm" style="display: none;">
                New Pending Analysis
                <span id="btn-refresh-content" class="badge bg-danger">
                    0
                </span>
            </button>
        </div>
        <table id="tbl-analysis" class="table table-striped table-sm w-100 table-hover"></table>
    </div>
}    

@section Scripts {    
    <script src="~/js/signalr/dist/browser/signalr.js"></script>
    <script type="text/javascript">
        'use strict';
        (() => {
            const connection = new signalR.HubConnectionBuilder().withUrl("/analysisHub").build();
            const $frm = $('#frm-analysis');
            const $tblAnalysis = $('#tbl-analysis');
            const $btnRefresh = $('#btn-refresh');
            const $btnRefreshContent = $('#btn-refresh-content');
            const tables = {};
            const routePrefix = '/Sentinel';
            const routes = {
                analysisTableJson: `${routePrefix}/AnalysisTableJson`
            }

            let analysisCount = 0;

            const analysis = {
                showHideCounter: () => {
                    if (analysisCount > 0){
                        $btnRefresh.show();                        
                    } else {
                        $btnRefresh.hide();
                    }
                    $btnRefreshContent.text(analysisCount);
                },
                getTemperatureData: (temp) => {
                    const fahrenheit = (temp.TemperatureCelsius * 9/5) + 32;
                    return `
                        <span class='badge bg-warning'>
                            <i class="fa-solid fa-temperature-high" aria-hidden='true'></i>
                            ${temp.TemperatureCelsius}&deg;C | ${fahrenheit}&deg;F
                        </span>
                    `;
                },
                getMoistureData: (moisture) => {
                    return `
                        <span class='badge bg-primary'>
                            <i class="fa-solid fa-droplet" aria-hidden='true'></i>
                            ${moisture.Moisture}/10
                        </span>
                    `;
                },
                getSoilData: (soil) => {
                    return `
                        <span class='badge bg-brown'>
                            <i class="fa-solid fa-water" aria-hidden='true'></i>
                            (N:${soil.NPpm}) (P:${soil.PPpm}) (K:${soil.KPpm})
                        </span>
                    `;
                },
                getSentinelStatusData: (ssData) => {
                    const isOffline = ssData.SentinelStatusCode === @((int)ESentinelStatus.Offline);
                    const bg = isOffline
                        ? 'bg-danger'
                        : 'bg-success';
                    const text = isOffline
                        ? 'Offline'
                        : 'Online';

                    return `
                        <span class='badge ${bg}'>
                            <i class="fa-solid fa-power-off" aria-hidden='true'></i>
                        </span>
                    `;
                },
                getDataRow: (obj) => {
                    const divs = [];
                    $.each(Object.keys(obj), function(index, key) {
                        let fn;
                        if (key === '@(EEventType.SentinelStatus)') {
                            fn = analysis.getSentinelStatusData;
                        } else if (key === '@(EEventType.Temperature)') {
                            fn = analysis.getTemperatureData;
                        } else if (key === '@(EEventType.Moisture)') {
                            fn = analysis.getMoistureData;
                        } else if (key === '@(EEventType.Soil)') {
                            fn = analysis.getSoilData;
                        }
                        const div = fn(obj[key]);
                        divs.push(div);
                    });
                    return divs.join('');
                },
                loadTable: () => {
                    if (!tables['analysis']) {
                        tables['analysis'] = $tblAnalysis
                            .on('click', 'button.btn-resolve', function(){
                                const $btn = $(this);
                                const analysisId = $btn.data('analysisid');
                                const __requestVerificationToken = $frm.find('input[name="__RequestVerificationToken"]').val();
                                app.confirm(() => {
                                    $.post($frm[0].action, { __requestVerificationToken, analysisId }, function(response) {
                                        analysis.loadTable();
                                        toastr.success('Analysis confirmed!');
                                    }).fail(function(xhr, textStatus, error){
                                        console.error(error);
                                    });
                                }, 'Confirm Analysis?',
                                    'Are you sure you want to confirm the analysis?',
                                    'Confirm Analysis',
                                    'Cancel');
                            })
                            .DataTable({
                                processing: true,
                                ajax: {
                                    url: routes.analysisTableJson
                                },
                                columns: @Html.Raw(Model.ColDefs_SentinelsPendingAnalysis),
                                columnDefs: [
                                    {
                                        targets: [0],
                                        className: 'text-center align-middle',
                                        render: function(data, type, row, meta) {
                                            if (type === 'display') {
                                                return `
                                                    <button type='button' class='btn btn-success btn-sm btn-resolve'
                                                        data-analysisid='${row.AnalysisId}'>
                                                        <i class='fa fa-check' aria-hidden='true'></i>
                                                    </button>
                                                `;
                                            }
                                            return data;
                                        }
                                    },
                                    {
                                        targets: [1],
                                        className: 'text-center align-middle',
                                        render: function (data, type, row, meta) {
                                            if (type === 'display') {
                                                return data;
                                            }
                                            return data;
                                        }
                                    },
                                    {
                                        targets: [2], // saved date
                                        className: 'text-center align-middle',
                                        render: function(data, type, row, meta) {
                                            if (type === 'display') {
                                                return moment(data).format('M/D/YYYY h:m:s.SSS a');
                                            }
                                            return data;
                                        }
                                    },
                                    {
                                        targets: [3], // data
                                        render: function(data, type, row, meta) {
                                            if (type === 'display') {
                                                return analysis.getDataRow(data);
                                            }
                                            return data;
                                        }
                                    }
                                ],
                                order: [[1, 'asc']]
                            });
                    } else {
                        tables['analysis'].ajax.reload();
                    }
                }
            }


            connection
                .on('ReceiveNewPendingAnalysis', (type, model) => {
                    //analysisCount++;
                    //analysis.showHideCounter();
                    //toastr.success(`Received new pending analysis with data: ${model}.`);
                    analysis.loadTable();
                });

            connection.start().then(() => {
                console.log('signalR started...');
            }).catch((err) => {
                return console.error(err.toString());
            });

            $btnRefresh
                .on('click', function() {
                    analysisCount = 0;
                    analysis.loadTable();
                    analysis.showHideCounter();
                });

            analysis.loadTable();
        })();
    </script>
}
